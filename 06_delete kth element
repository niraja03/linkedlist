#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

// ✅ Delete last node
Node* deletelast(Node* head) {
    if (head == NULL) return NULL;
    if (head->next == NULL) {
        delete head;
        return NULL;
    }
    Node* temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    delete temp->next;  // ✅ Corrected
    temp->next = NULL;
    return head;
}

// ✅ Delete kth node
Node* removek(Node* head, int k) {
    if (head == NULL) return NULL;
    if (k == 1) {
        Node* temp = head;
        head = head->next;
        delete temp;  // ✅ Corrected
        return head;
    }
    int cnt = 0;
    Node* temp = head;
    Node* prev = NULL;
    while (temp != NULL) {
        cnt++;
        if (cnt == k) {
            prev->next = prev->next->next;
            delete temp;  // ✅ Corrected
            break;
        }
        prev = temp;
        temp = temp->next;
    }
    return head;
}

// ✅ Convert array to linked list
Node* convertArr2LL(vector<int>& arr) {
    if (arr.size() == 0) return NULL;
    Node* head = new Node(arr[0]);
    Node* mover = head;
    for (int i = 1; i < arr.size(); i++) {
        mover->next = new Node(arr[i]);
        mover = mover->next;
    }
    return head;
}

// ✅ Print linked list
void print(Node* head) {
    while (head != NULL) {
        cout << head->data;
        if (head->next) cout << " -> ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    vector<int> arr = {2, 3, 4, 5, 6};   // ✅ Corrected
    Node* head = convertArr2LL(arr);

    cout << "Original list: ";
    print(head);

    head = deletelast(head);   // delete last node
    cout << "After deleting last node: ";
    print(head);

    return 0;
}
